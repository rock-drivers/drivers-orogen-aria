name "aria"
# Optionally declare the version number
# version "0.1"

import_types_from "base"
import_types_from "AriaTypes.hpp"
using_library "aria"

task_context "Task" do
   # A configuration property (here, a std::string). Its value can be retrieved
   # in the C++ code with # _config_value.get() and _config_value.set(new_value).
   
   needs_configuration

   property("serial_port", "std/string", "/dev/ttyS0").
    doc("Path to Serial-Port of Controller (default: ttyS0)")
   property("baudrate", "int", 9600).
    doc("Baudrate of ARCOS host controller")
   property("ariapath", "/std/string").
    doc("Path to Aria library (e.g. /usr/local/Aria/")
   property("parameter", "/std/string").
    doc("Additional parameters passed to robot connector (e.g. '-rlpr -rlps')")
   property("poweron_boot", "std/string").
    doc("Comma or Space separated List of Ports that are powered on at boot")
   property("wheels", "int", 4).
    doc("Number of Wheels (default: 4)")
   # The global name for the local 'odometry' frame
   property('odometry_frame', '/std/string', 'odometry')
   # The global name for the local 'body' frame
   property('body_frame', '/std/string', 'body')

   # Standard deviations
   property("sigma_velocity", "double", 0.3).
    doc("Standard deviation of the velocity")
   property("sigma_angular_velocity", "double", 0.1).
    doc("Standard deviation of the rotation speed")

   property("timeout", "double", 0.1).
    doc("Timeout in seconds after which default values will be send to the robot")

   # An input port, i.e. an object from which the component gets data from
   # other components' outputs
   #
   # Data can be retrieved using _input.read(value), which returns true if data
   # was available, and false otherwise. _input.connected() returns if this
   # input is connected to an output or not.
   input_port("transrot_vel", "base/commands/Motion2D").
    doc("Motion given as translation (m/s) and rotation (rad/s) velocity")
   input_port("leftright_vel", "aria/commands/Velocity2").
    doc("Motion given as left and right wheel velocity (m/s)")
   
   # output ports
   output_port("robot_status", "aria/RobotStatus").
    doc("Status of the robot containing several attributes")
   output_port("robot_pose", "base/samples/RigidBodyState").
    doc("Pose of the robot relative to its initial position")
   output_port("robot_pose_raw", "base/samples/RigidBodyState").
    doc("Raw pose of the robot relative to its initial position without corrections by gyroscope.")
   output_port("robot_motion", "aria/samples/Velocity").
    doc("Translation (m/s) and rotation (rad/s) velocity measured by robot")
   output_port("robot_motion2", "aria/samples/Velocity2").
    doc("Left and right wheel velocity (m/s) measured by robot")
   output_port("robot_compass", "aria/samples/CompassHeading").
    doc("Compass heading")
   output_port("robot_battery", "aria/samples/BatteryLevel").
    doc("Battery level in percent")
   output_port("robot_temp", "aria/samples/Temperature").
    doc("Temperature of the robot")
   output_port("robot_odometer", "aria/samples/Odometer").
    doc("Total travelled distance (m)")
   output_port("robot_encoder", "aria/samples/Encoder").
    doc("Wheel encoder values")
   output_port("robot_bumpers", "aria/samples/Bumpers").
    doc("State of the bumpers")
   
   output_port("motor_states", "base/samples/Joints").
    doc("Encoder values per wheel")

   output_port("robot_command_in", '/base/samples/Motion2D').
       doc("Motion command and timestamp when it was transmitted to the robot controller")

   # If you want that component's updateHook() to be executed when the "input"
   # port gets data, uncomment this
   # port_driven "transrot_vel"
   
   ## Operations:
   # Reset Odometer
   operation('resetOdometer').
    doc("Reset the total travelled distance returned at port 'robot_odometer'")
   	
   # Turn on/off Port 'portNr' of the PDB
   operation('controlPDB').
   	argument('portNr', 'int').
   	argument('onoff', 'bool').
    doc("De-/Activate a powerport on the power distribution board")

    operation('motorsOn').
        doc("give power to the motors")
    operation('motorsOff').
        doc("switch motors off")
   	
   # Send direct Command
   operation('directCommand').
   	argument('MRcmd2byte', '/aria/commands/DirectCommand2Byte').
    doc("Send raw commands to the controller")
   	
   # Set translational and rotational Velocity
   operation('transrotVel').
   	argument('velocities', '/base/commands/Motion2D').
    doc("Set translation and rotation velocity")
   operation('transrotVel2').
   	argument('translational', 'double'). # in m/s
   	argument('rotational', 'double'). #in rad/s
    doc("Set translation and rotation velocity separated")
   	
   # Set Velocity for left and right Wheels
   operation('lrVel').
   	argument('left', 'double').
   	argument('right', 'double').
    doc("Set left and right wheel velocity")
   
   periodic 0.1
end


